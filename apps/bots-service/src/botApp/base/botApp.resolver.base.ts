/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBotAppArgs } from "./CreateBotAppArgs";
import { UpdateBotAppArgs } from "./UpdateBotAppArgs";
import { DeleteBotAppArgs } from "./DeleteBotAppArgs";
import { BotAppCountArgs } from "./BotAppCountArgs";
import { BotAppFindManyArgs } from "./BotAppFindManyArgs";
import { BotAppFindUniqueArgs } from "./BotAppFindUniqueArgs";
import { BotApp } from "./BotApp";
import { OpenAppFindManyArgs } from "../../openApp/base/OpenAppFindManyArgs";
import { OpenApp } from "../../openApp/base/OpenApp";
import { BotAppService } from "../botApp.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BotApp)
export class BotAppResolverBase {
  constructor(
    protected readonly service: BotAppService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BotApp",
    action: "read",
    possession: "any",
  })
  async _botAppsMeta(
    @graphql.Args() args: BotAppCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BotApp])
  @nestAccessControl.UseRoles({
    resource: "BotApp",
    action: "read",
    possession: "any",
  })
  async botApps(@graphql.Args() args: BotAppFindManyArgs): Promise<BotApp[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BotApp, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BotApp",
    action: "read",
    possession: "own",
  })
  async botApp(
    @graphql.Args() args: BotAppFindUniqueArgs
  ): Promise<BotApp | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BotApp)
  @nestAccessControl.UseRoles({
    resource: "BotApp",
    action: "create",
    possession: "any",
  })
  async createBotApp(@graphql.Args() args: CreateBotAppArgs): Promise<BotApp> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BotApp)
  @nestAccessControl.UseRoles({
    resource: "BotApp",
    action: "update",
    possession: "any",
  })
  async updateBotApp(
    @graphql.Args() args: UpdateBotAppArgs
  ): Promise<BotApp | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BotApp)
  @nestAccessControl.UseRoles({
    resource: "BotApp",
    action: "delete",
    possession: "any",
  })
  async deleteBotApp(
    @graphql.Args() args: DeleteBotAppArgs
  ): Promise<BotApp | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OpenApp], { name: "openApps" })
  @nestAccessControl.UseRoles({
    resource: "OpenApp",
    action: "read",
    possession: "any",
  })
  async resolveFieldOpenApps(
    @graphql.Parent() parent: BotApp,
    @graphql.Args() args: OpenAppFindManyArgs
  ): Promise<OpenApp[]> {
    const results = await this.service.findOpenApps(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
